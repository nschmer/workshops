plot(rl.nlcd2016)
## with the shapefile over top the image
plot(sf.colorado,add=TRUE,lwd=4)
## Reading in a shapefile that contains the shapes for each US county
##File location and name
file <- "county maps/cb_2016_us_county_5m.shp"
## lists attributes of the shapefile
ogrListLayers(file)
## Read in the shapefile
sf.counties <- readOGR(file, layer = "cb_2016_us_county_5m")
## gives the project information for the shapefile
projection(sf.counties)
## Shapefile contains shape information for each county
head(sf.counties@data)
sf.counties@data
## Extracting the shapefile for Larimer County
sf.larimer <- sf.counties[which(sf.counties@data$NAME=="Larimer"),]
## Plotting the shapefile for Larimer County
plot(sf.larimer)
## Copy the coordinate reference system from the Colorado raster object
## to the Larimer county shapefile
sf.larimer <- spTransform(sf.larimer,crs(rl.nlcd2016))
## plot the Colorado raster object
plot(rl.nlcd2016)
## plot the Larimer county shapefile on top
plot(sf.larimer,add=TRUE,lwd=2)
# We use the crop function to look at the raster image for just Larimer county.
# This function found the smallest rectangle that fit the shapefile for Larimer
# county, and then cropped the Colorado NLCD raster image to fit it.
rl.larimer <- crop(rl.nlcd2016, sf.larimer)
# Plot the raster image for just Larimer county
plot(rl.larimer)
# Add the plot of the shapeful of Larimer county on top.
plot(sf.larimer,add=TRUE,lwd=2)
masked <- mask(rl.nlcd2016, sf.larimer)
masked <- mask(rl.larimer, sf.larimer)
masked <- mask(rl.larimer, sf.larimer)
plot(masked)
??mask
?mask
masked <- mask(rl.larimer, sf.larimer, maskvalue = 9999)
plot(masked)
masked <- mask(rl.larimer, sf.larimer, mask::maskvalue = 9999)
plot(masked)
masked <- raster::mask(rl.larimer, sf.larimer, maskvalue = F)
plot(masked)
masked <- raster::mask(rl.larimer, sf.larimer, maskvalue = NA)
plot(masked)
masked <- raster::mask(rl.larimer, sf.larimer, maskvalue = TRUE)
plot(masked)
masked
masked <- raster::mask(rl.larimer, sf.larimer, maskvalue = TRUE,updatevalue=999)
library(geoR)
install.packages("geoR")
library(geoR)
masked=as.factor(masked)
plot(masked)
install.packages("geoR")
library(geoR)
# Plot the raster image for just Larimer county
plot(rl.larimer)
# Add the plot of the shapeful of Larimer county on top.
plot(sf.larimer,add=TRUE,lwd=2)
## Location of Wagar Hall
pt.wagar <- data.frame(long = -105.081615,lat = 40.574916)
## We specify that we're using lattitude and longitude
coordinates(pt.wagar) = ~ long + lat
## Adds the below string to the CRS section of the pt.wagar object
proj4string(pt.wagar) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
## Copies the CRS from the raster object to the point object
pt.wagar <- spTransform(pt.wagar, crs(rl.nlcd2016))
points(pt.wagar,col="green",pch=20,cex=3)
## Extract the kind of landcover at Wagar Hall
## Visit https://www.mrlc.gov/nlcd11_leg.php to look up the code you
## optained to determine the land cover classification.
extract(rl.nlcd2016,pt.wagar)
View(nlcd)
View(land_cover)
geo.center=data.frame(long = -105.7821,lat = 39.5501)
#nlcd for co
plot(sf.colorado,add=TRUE,lwd=4)
plot(geo.center, add=T)
#nlcd for co
plot(sf.colorado,add=TRUE,lwd=4)
plot(geo.center)
#nlcd for co
plot(sf.colorado,add=TRUE,lwd=4)
dev.off
dev.off()
plot(geo.center)
#nlcd for co
plot(sf.colorado, add=TRUE, lwd=4)
#nlcd for co
plot(sf.colorado, add=TRUE, lwd=4)
dev.off()
#nlcd for co
plot(sf.colorado, add=TRUE, lwd=4)
#nlcd for co
plot(sf.colorado, lwd=4)
plot(geo.center)
plot(rl.nlcd2016)
#nlcd for co
plot(sf.colorado, lwd=4)
#nlcd for co
plot(rl.nlcd2016)
plot(sf.colorado, lwd=4, add=T)
projection(sf.colorado)
projection(rl.nlcd2016)
#make the projection of the geo point the same as nlcd and sf.colorado
projection(geo.center)
#make the projection of the geo point the same as nlcd and sf.colorado
#make it into a spatial point
coordinates(geo.center) = ~ long + lat
## Adds the below string to the CRS section of the pt.wagar object
proj4string(geo.center) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
## Copies the CRS from the raster object to the point object
pt.geocenter <- spTransform(geo.center, crs(rl.nlcd2016))
points(pt.geocenter,col="green",pch=20,cex=3)
points(pt.geocenter,col="clear",pch=20,cex=3)
points(pt.geocenter, col="red", pch=0, cex=3)
dev.off()
#nlcd for co
plot(rl.nlcd2016)
plot(sf.colorado, lwd=4, add=T)
points(pt.geocenter, col="red", pch=0, cex=5)
#nlcd for co
plot(sf.colorado, lwd=4)
plot(rl.nlcd2016, add=T)
View(pt.wagar)
#nlcd for co
plot(rl.nlcd2016)
plot(sf.colorado, lwd=4, add=T)
points(pt.geocenter, col="red", pch=0, cex=5)
points(pt.geocenter, col="red", pch=0, cex=5, lwd= 3)
#make these into spatial points
pt.mayor.of.old.town=data.frame(long = -105.0786,lat = 40.5789)
projection(sf.larimer)
#make these into spatial points
pt.mayor.of.old.town=data.frame(long = -105.0786,lat = 40.5789)
coordinates(pt.mayor.of.old.town) = ~ long + lat
coordinates(pt.horsetooth) = ~ long + lat
pt.horsetooth=data.frame(long = -105.1969,lat = 40.5397)
coordinates(pt.horsetooth) = ~ long + lat
proj4string(pt.mayor.of.old.town) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
proj4string(pt.horsetooth) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
#plot larimer county
plot(sf.larimer)
points(pt.horsetooth, col="blue", pch=20, cex=5, lwd= 3)
points(pt.horsetooth, col="blue", pch=20, cex=5, lwd= 3, add=T)
plot(pt.horsetooth, col="blue", pch=20, cex=5, lwd= 3, add=T)
#plot larimer county
plot(sf.larimer)
plot(pt.horsetooth, col="blue", pch=20, cex=5, lwd= 3, add=T)
pt.mayor.of.old.town <- spTransform(pt.mayor.of.old.town, crs(rl.nlcd2016))
pt.horsetooth <- spTransform(pt.horsetooth, crs(rl.nlcd2016))
#plot larimer county
plot(sf.larimer)
points(pt.horsetooth, col="blue", pch=20, cex=5, lwd= 3x)
points(pt.horsetooth, col="blue", pch=20, cex=5, lwd= 3)
points(pt.horsetooth, col="blue", pch=20, cex=2, lwd= 3)
points(pt.horsetooth, col="blue", pch=20, cex=2)
)
#plot larimer county
plot(sf.larimer)
points(pt.horsetooth, col="blue", pch=20, cex=2)
points(pt.mayor.of.old.town, col= "red", pch= 20, cex=2)
#to try and remove all the excess area, look back at module 3
#add in this line
rl.larimer@legend@colortable[1]=NA
# Plot the raster image for just Larimer county
plot(rl.larimer)
# We use the crop function to look at the raster image for just Larimer county.
# This function found the smallest rectangle that fit the shapefile for Larimer
# county, and then cropped the Colorado NLCD raster image to fit it.
rl.larimer <- crop(rl.nlcd2016, sf.larimer)
masked <- raster::mask(rl.larimer, sf.larimer, maskvalue = TRUE,updatevalue=999)
plot(masked)
masked <- raster::mask(rl.larimer, sf.larimer)
plot(masked)
#to try and remove all the excess area, look back at module 3
#add in this line
rl.larimer@legend@colortable[1]=NA
# Plot the raster image for just Larimer county
plot(rl.larimer)
library(geoR)
library(maps)
library(mvtnorm)
library(rgdal)
library(maptools)
ut.st=map("state",regions="utah",fill=TRUE,plot=FALSE)
ut.coords=cbind(ut.st$x,ut.st$y)
plot(ut.coords,type="b")
ut.coords=rbind(ut.coords,ut.coords[1,])
ut.latlon=SpatialPoints(ut.coords,proj4string=CRS("+proj=longlat +datum=WGS84"))
str(ut.latlon)
ut.utm=spTransform(ut.latlon,CRS("+proj=utm +zone=12  +datum=WGS84"))
ut.range=ut.utm@bbox
xg=seq(ut.range[1],ut.range[3],,25)
yg=seq(ut.range[2],ut.range[4],,30)
ut.locs=as.matrix(expand.grid(xg,yg))
plot(ut.locs,pch=20,asp=1,xlab="easting",ylab="northing")
points(ut.utm@coords,type="l",lwd=3)
ntot=dim(ut.locs)[1]
D=as.matrix(dist(ut.locs))
s2=2
phi=1.5*10^-5
Sigma=s2*exp(-D*phi)
plot(seq(0,max(D),,20),s2*exp(-seq(0,max(D),,20)*phi),type="o",ylab="cov",xlab="distance")  # plot true covariance vs. distance between locs
set.seed(13)
eps=as.vector(rmvnorm(1,matrix(0,ntot,1),Sigma,method="chol"))     # may take some time
image(matrix(eps,length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),xlab="easting",ylab="northing",asp=TRUE)  # plot spatially correlated "error" process
points(ut.utm@coords,type="l",lwd=3)
set.seed(13)
eps=as.vector(rmvnorm(1,matrix(0,ntot,1),Sigma,method="chol"))     # may take some time
image(matrix(eps,length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),xlab="easting",ylab="northing",asp=TRUE)  # plot spatially correlated "error" process
points(ut.utm@coords,type="l",lwd=3)
idxkeep=sort(sample(1:ntot,round(0.4*ntot)))
ut.obs.locs=ut.locs[idxkeep,]
n=length(idxkeep)  # sample size of observed data
epsmask=matrix(0,ntot,1)
epsmask[idxkeep,]=1
image(matrix(eps,length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),xlab="easting",ylab="northing",asp=TRUE)  # plot full spatial process
image(matrix(epsmask,length(xg),length(yg)),x=xg,y=yg,col=c("white","transparent"),xlab="easting",ylab="northing",asp=TRUE,add=TRUE)  # mask out unobserved data
points(ut.utm@coords,type="l",lwd=3)
p=3
X=matrix(1,ntot,p)  # design matrix of covariates (and initial vector of ones for intercept)
X[,2]=-cos(scale(ut.locs[,1])-.5)*cos(scale(ut.locs[,2]))
X[,3]=scale(ut.locs[,1])+scale(ut.locs[,2])
beta=c(1,-2,1)  # regression coefficients
y=X%*%beta+eps  # response data
layout(matrix(1:4,2,2))  #  maps of data, errors (epsilon), and 2 covariates
image(matrix(y,length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),main="y",xlab="easting",ylab="northing",asp=TRUE)
image(matrix(epsmask,length(xg),length(yg)),x=xg,y=yg,col=c("white","transparent"),asp=TRUE,add=TRUE)
points(ut.utm@coords,type="l",lwd=3)
image(matrix(eps,length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),main=bquote(epsilon),xlab="easting",ylab="northing",asp=TRUE)
image(matrix(epsmask,length(xg),length(yg)),x=xg,y=yg,col=c("white","transparent"),asp=TRUE,add=TRUE)
points(ut.utm@coords,type="l",lwd=3)
image(matrix(X[,2],length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),main=bquote(x[1]),xlab="easting",ylab="northing",asp=TRUE)
points(ut.utm@coords,type="l",lwd=3)
image(matrix(X[,3],length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),main=bquote(x[2]),xlab="easting",ylab="northing",asp=TRUE)
points(ut.utm@coords,type="l",lwd=3)
ut.df=data.frame(y=y,x1=X[,2],x2=X[,3])
ut.obs.df=ut.df[idxkeep,]
ut.unobs.df=ut.df[(1:ntot)[-idxkeep],]
ut.resid=resid(lm(y~x1+x2,data=ut.obs.df))
ut.gd=as.geodata(cbind(ut.obs.locs,ut.obs.df),coords.col=1:2,data.col=3,covar.col=4:5)
ut.v=variog(ut.gd,trend=~x1+x2,max.dist=max(dist(ut.obs.locs))/2)
ut.wls=variofit(ut.v,ini=c(4,120000),cov.model="exponential",fix.nug=FALSE,nugget=.25,wei="cressie")
ut.wls
plot(ut.v)
lines(ut.wls)
dev.off()
plot(ut.v)
lines(ut.wls)
ut.full.gd=as.geodata(cbind(ut.locs,ut.df),coords.col=1:2,data.col=3,covar.col=4:5)
ut.krig=krige.conv(ut.gd,loc=ut.full.gd$coords,krige=krige.control(type.krige="ok",trend.d=trend.spatial(ut.v$trend,ut.gd),trend.l=trend.spatial(ut.v$trend,ut.full.gd),obj.m=ut.wls))
layout(matrix(1:3,1,3))  #  maps of data and predictions
image(matrix(y,length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),main="y full",xlab="easting",ylab="northing",asp=TRUE)
lines(ut.utm@coords,lwd=2)
image(matrix(y,length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),main="y obs",xlab="easting",ylab="northing",asp=TRUE)
image(matrix(epsmask,length(xg),length(yg)),x=xg,y=yg,col=c("white","transparent"),asp=TRUE,add=TRUE)
lines(ut.utm@coords,lwd=2)
image(matrix(ut.krig$predict,length(xg),length(yg)),x=xg,y=yg,col=rev(rainbow(100,start=0,end=.7)),main="y pred",xlab="easting",ylab="northing",asp=TRUE)
lines(ut.utm@coords,lwd=2)
getwd()
setwd("/Users/natalieschmer/Documents/GitHub/CSU/workshops/data/R_Spatial_Workshop_2020/modules/Module_5")
temp.df=read.csv("20171014_Temp.csv")
y=temp.df$Temp
n=length(y)
locs=as.matrix(temp.df[,2:1])
n.lat=75
n.lon=round(n.lat*diff(range(locs[,1]))/diff(range(locs[,2])))
n.pred=n.lat*n.lon
lon.vals=seq(min(locs[,1]),max(locs[,1]),,n.lon)
lat.vals=seq(min(locs[,2]),max(locs[,2]),,n.lat)
locs.pred=as.matrix(expand.grid(lon.vals,lat.vals))
locs.full=rbind(locs,locs.pred)
locs.full.sc=locs.full
locs.full.sc=scale(locs.full) #  standardize locations to use as covariates
data(us.cities)
CO.cities=us.cities[c(322,247,360,728,192),]
CO.cities$name=c("Fort Collins","Denver","Grand Junction","Pueblo","Colorado Springs")
par(cex.lab=1.25,cex.main=1.5,mar=c(5,5,4,2))
map("state","Colorado",xlim=c(-110,-101),ylim=c(36.5,41.5))
points(locs,pch=20,cex=3*(.25+(y-min(y))/diff(range(y))),col=rgb(0,0,0,.4))
map("state",add=TRUE)
map.axes()
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE)
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE,capitals=2)
dev.off()
par(cex.lab=1.25,cex.main=1.5,mar=c(5,5,4,2))
map("state","Colorado",xlim=c(-110,-101),ylim=c(36.5,41.5))
points(locs,pch=20,cex=3*(.25+(y-min(y))/diff(range(y))),col=rgb(0,0,0,.4))
map("state",add=TRUE)
map.axes()
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE)
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE,capitals=2)
## Copy the coordinate reference system from the Colorado raster object
## to the Larimer county shapefile
sf.larimer <- spTransform(sf.larimer,crs(rl.nlcd2016))
## plot the Colorado raster object
plot(rl.nlcd2016)
## plot the Larimer county shapefile on top
plot(sf.larimer,add=TRUE,lwd=2)
# We use the crop function to look at the raster image for just Larimer county.
# This function found the smallest rectangle that fit the shapefile for Larimer
# county, and then cropped the Colorado NLCD raster image to fit it.
rl.larimer <- crop(rl.nlcd2016, sf.larimer)
masked <- raster::mask(rl.larimer, sf.larimer)
plot(masked)
#to try and remove all the excess area, look back at module 3
#add in this line
rl.larimer@legend@colortable[1]=NA
plot(masked)
rl.larimer@legend
#to try and remove all the excess area, look back at module 3
#add in this line
rl.larimer@legend@colortable[1]=NA
rl.larimer@legend
#to try and remove all the excess area, look back at module 3
#add in this line
rl.larimer@legend@colortable[1] = NA
rl.larimer@legend
#to try and remove all the excess area, look back at module 3
#add in this line
rl.larimer@legend@colortable[1:10] = NA
# Plot the raster image for just Larimer county
plot(rl.larimer)
#to try and remove all the excess area, look back at module 3
#add in this line
masked@legend@colortable[1] = NA
# Plot the raster image for just Larimer county
plot(masked)
#  y~lon
AIC(lm(y~locs.full.sc[1:n,1]))
#  y~lat
AIC(lm(y~locs.full.sc[1:n,2]))
#  y~lon+lat
AIC(lm(y~locs.full.sc[1:n,]))
locs.full.sc
locs.full.sc[1:n,]
locs.full.sc[1:n,2]
View(locs.full.sc)
locs.full.sc[1:n,1]
#  y~lon+lon^2
AIC(lm(y~locs.full.sc[1:n,1] + I(locs.full.sc[1:n,1]^2)))
#  y~lat+lat^2
AIC(lm(y~locs.full.sc[1:n,2] + I(locs.full.sc[1:n,2]^2)))
#  y~lon+lat+lon^2
AIC(lm(y~locs.full.sc[1:n,]+I(locs.full.sc[1:n,1]^2)))
#  y~lon+lat+lat^2
AIC(lm(y~locs.full.sc[1:n,]+I(locs.full.sc[1:n,2]^2)))
#  y~lon+lat+lon^2+lat^2
AIC(lm(y~locs.full.sc[1:n,]+I(locs.full.sc[1:n,1]^2)+I(locs.full.sc[1:n,2]^2)))  # This model scores best in terms of AIC
summary(lm(y~locs.full.sc[1:n,]+I(locs.full.sc[1:n,1]^2)+I(locs.full.sc[1:n,2]^2)))  # All but one coefficient has low p-value
co.obs.df=data.frame(y=y,x1=locs.full.sc[1:n,1],x2=locs.full.sc[1:n,2],x3=locs.full.sc[1:n,1]^2,x4=locs.full.sc[1:n,2]^2)
co.unobs.df=data.frame(x1=locs.full.sc[,1],x2=locs.full.sc[,2],x3=locs.full.sc[,1]^2,x4=locs.full.sc[,2]^2)
co.resid=resid(lm(y~x1+x2+x3+x4,data=co.obs.df))
co.gd=as.geodata(cbind(locs,co.obs.df),coords.col=1:2,data.col=3,covar.col=4:7)
co.v=variog(co.gd,trend=~x1+x2+x3+x4,max.dist=max(dist(locs))/3)
co.wls=variofit(co.v,ini=c(17,.5),cov.model="exponential",fix.nug=FALSE,nugget=1,wei="cressie")
co.wls
plot(co.v)
lines(co.wls)
co.full.gd=as.geodata(cbind(locs.full,co.unobs.df),coords.col=1:2,covar.col=3:6)
co.krig=krige.conv(co.gd,loc=co.full.gd$coords,krige=krige.control(type.krige="ok",trend.d=trend.spatial(co.v$trend,co.gd),trend.l=trend.spatial(co.v$trend,co.full.gd),obj.m=co.wls))
data(us.cities)
CO.cities=us.cities[c(322,247,360,728,192),]
CO.cities$name=c("Fort Collins","Denver","Grand Junction","Pueblo","Colorado Springs")
##### Kriging Predictions
map("state","Colorado",xlim=c(-110,-101),ylim=c(36.5,41.5))
image(matrix(co.krig$predict[-(1:n)],n.lon,n.lat),x=lon.vals,y=lat.vals,col=rev(rainbow(100,start=0,end=.7)),main="y pred",xlab="easting",ylab="northing",asp=TRUE,add=TRUE)
points(locs,pch=20,cex=3*(.25+(y-min(y))/diff(range(y))),col=rgb(0,0,0,.25))
map("state",add=TRUE)
map.axes()
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE)
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE,capitals=2)
title("Predictions")
##### Kriging Prediction Std. Dev.
map("state","Colorado",xlim=c(-110,-101),ylim=c(36.5,41.5))
image(matrix(sqrt(co.krig$krige.var[-(1:n)]),n.lon,n.lat),x=lon.vals,y=lat.vals,col=rev(rainbow(100,start=0,end=.7)),main="y pred sd",xlab="easting",ylab="northing",asp=TRUE,add=TRUE)
points(locs,pch=20,cex=3*(.25+(y-min(y))/diff(range(y))),col=rgb(0,0,0,.25))
map("state",add=TRUE)
map.axes()
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE)
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE,capitals=2)
title("Prediction Std. Dev.")
##### Kriging Predictions
map("state","Colorado",xlim=c(-110,-101),ylim=c(36.5,41.5))
image(matrix(co.krig$predict[-(1:n)],n.lon,n.lat),x=lon.vals,y=lat.vals,col=rev(rainbow(100,start=0,end=.7)),main="y pred",xlab="easting",ylab="northing",asp=TRUE,add=TRUE)
points(locs,pch=20,cex=3*(.25+(y-min(y))/diff(range(y))),col=rgb(0,0,0,.25))
map("state",add=TRUE)
map.axes()
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE)
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE,capitals=2)
title("Predictions")
##### Kriging Prediction Std. Dev.
map("state","Colorado",xlim=c(-110,-101),ylim=c(36.5,41.5))
image(matrix(sqrt(co.krig$krige.var[-(1:n)]),n.lon,n.lat),x=lon.vals,y=lat.vals,col=rev(rainbow(100,start=0,end=.7)),main="y pred sd",xlab="easting",ylab="northing",asp=TRUE,add=TRUE)
points(locs,pch=20,cex=3*(.25+(y-min(y))/diff(range(y))),col=rgb(0,0,0,.25))
map("state",add=TRUE)
map.axes()
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE)
map.cities(CO.cities, country="CO",pch=17,cex=1.5,label=TRUE,capitals=2)
title("Prediction Std. Dev.")
getwd()
setwd()
seted("/Users/natalieschmer/Documents/GitHub/CSU/workshops/data/R_Spatial_Workshop_2020/modules/Module_6")
setwd("/Users/natalieschmer/Documents/GitHub/CSU/workshops/data/R_Spatial_Workshop_2020/modules/Module_6")
library(rgdal)   # Functions to work with shapefiles and KML files
library(sp)      # Functions to work with shapefiles and KML files
library(raster)  # Functions for working with rasters
library(car)     # Functions for implementing the delta method
# Import shapefiles
nebraska.sf <- readOGR(dsn = "shapefiles/nebraska.shp")
crithab.sf <- readOGR(dsn = "shapefiles/critical habitat.shp")
# Import raster data (2011 NLCD)
# See legend at https://www.mrlc.gov/nlcd11_leg.php
nlcd.rl <- raster("raster/NLCD.tif")
# Load location of whooping crane groups
wc.df <- read.csv("standard data/whooping crane locations.csv")
head(wc.df)
# Plot spatial data
plot(nebraska.sf)
plot(nlcd.rl,add=TRUE)
plot(crithab.sf,add=TRUE)
#####
##### Make point file
#####
wc.pt <- wc.df #whooping crane locations
coordinates(wc.pt) =~ Longitude + Latitude
proj4string(wc.pt) <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
wc.pt <- spTransform(wc.pt, crs(crithab.sf))
# Plot data
plot(nlcd.rl)
plot(crithab.sf,add=TRUE)
points(wc.pt,pch=20,cex=0.5)
# Extract NLCD land cover code
wc.df$lc <- extract(nlcd.rl, wc.pt)
View(wc.df)
# Convert land cover code into binary
# predictor variable of presence in
# emergent herbaceous wetlands is 95
wc.df$wetland <- ifelse(wc.df$lc==95, 1, 0)
# View data
head(wc.df)
# Calculate the proportion of whooping crane records
# occurring in emergent herbaceous wetlands
mean(wc.df$wetland)
# Sample 10,000 available (quadrature integration) points
available.pt <- spsample(crithab.sf,type="regular",n=10000)
# Create a data frame for available points
available.df <- data.frame(lc = rep(NA,length(available.pt)))
available.df$lc <- extract(nlcd.rl,available.pt)
available.df$wetland <- ifelse(available.df$lc==95,1,0)
mean(available.df$wetland)
wc.df$used <- 1
available.df$used <- 0
all.df <- rbind(wc.df[,5:6],available.df[,2:3])
# Calculate the ratio of use/availability of
# emergent herbaceous wetlands
mean(wc.df$wetland)/mean(available.df$wetland)
ipp.model <- glm(used~wetland,data = all.df,family=binomial(link="logit"))
summary(ipp.model)
confint.default(ipp.model)
# Calculate the relative intensity of use
exp(coef(ipp.model)[2])
# Calculate 95% confidence interval for the
# relative intensity of use
deltaMethod(ipp.model,"exp(beta1)",parameterNames = c("beta0","beta1"))
ipp.model <- glm(used~wetland,data = all.df,family=binomial(link="logit"),
weights = 1000^(1-all.df$used))
summary(ipp.model)
confint.default(ipp.model)
# Calculate the relative intensity of use
exp(coef(ipp.model)[2])
# Calculate 95% confidence interval for the relative intensity of use
deltaMethod(ipp.model,"exp(beta1)",parameterNames = c("beta0","beta1"))
# Change type of available points
# Change type to "random" for Monte Carlo integration
available.pt <- spsample(crithab.sf,type="random",n=10000)
available.df <- data.frame(lc = rep(NA,length(available.pt)))
available.df$lc <- extract(nlcd.rl,available.pt)
available.df$wetland <- ifelse(available.df$lc==95,1,0)
available.df$used <- 0
all.df <- rbind(wc.df[,5:6],available.df[,2:3])
# Refit point process model
ipp.model <- glm(used~wetland,data = all.df,family=binomial(link="logit"))
# Calculate 95% confidence interval for# relative intensity of use
deltaMethod(ipp.model,"exp(beta1)",parameterNames = c("beta0","beta1"))
points <- c(100, 250, 500, 1000, 2500, 5000, 10,000, 25000, 50000, 100000)
results <- matrix(,length(Q),1)
Q <- c(100, 250, 500, 1000, 2500, 5000, 10,000, 25000, 50000, 100000)
results <- matrix(,length(Q),1)
colnames(results) <- c("Estimate")
for(i in 1:length(Q)){
# Make new data frame with Q integration points
available.pt <- spsample(crithab.sf,type="regular",n=Q[i])
available.df <- data.frame(lc = rep(NA,length(available.pt)))
available.df$lc <- extract(nlcd.rl,available.pt)
available.df$wetland <- ifelse(available.df$lc==95,1,0)
available.df$used <- 0
all.df <- rbind(wc.df[,5:6],available.df[,2:3])
# Fit point process model
ipp.model <- glm(used~wetland,data = all.df,family=binomial(link="logit"))
est <- deltaMethod(ipp.model,"exp(beta1)",parameterNames = c("beta0","beta1"))
# Save results
results[i,] <- c(est$Estimate)
}
plot(Q,results[,1],typ="b",
xlab="Number of available points",
ylab="Relative intensity of use")
